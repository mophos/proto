// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Search(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrSearchResponse, error)
	GetService(ctx context.Context, in *EmrRequest, opts ...grpc.CallOption) (*EmrGetServiceResponse, error)
	GetOpdScreening(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdScreenResponse, error)
	GetOpdDiagnosis(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdDiagResponse, error)
	GetOpdProcedure(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdProcedureResponse, error)
	GetOpdDrug(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdDrugResponse, error)
	GetOpdLab(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdLabResponse, error)
	GetAppointment(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrGetAppointmentResponse, error)
	GetReferOut(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrGetReferOutResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Search(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrSearchResponse, error) {
	out := new(EmrSearchResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetService(ctx context.Context, in *EmrRequest, opts ...grpc.CallOption) (*EmrGetServiceResponse, error) {
	out := new(EmrGetServiceResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOpdScreening(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdScreenResponse, error) {
	out := new(EmrGetOpdScreenResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetOpdScreening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOpdDiagnosis(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdDiagResponse, error) {
	out := new(EmrGetOpdDiagResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetOpdDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOpdProcedure(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdProcedureResponse, error) {
	out := new(EmrGetOpdProcedureResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetOpdProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOpdDrug(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdDrugResponse, error) {
	out := new(EmrGetOpdDrugResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetOpdDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOpdLab(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrGetOpdLabResponse, error) {
	out := new(EmrGetOpdLabResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetOpdLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetAppointment(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrGetAppointmentResponse, error) {
	out := new(EmrGetAppointmentResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetReferOut(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrGetReferOutResponse, error) {
	out := new(EmrGetReferOutResponse)
	err := c.cc.Invoke(ctx, "/grpc.Service/GetReferOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Search(context.Context, *EmrSearchRequest) (*EmrSearchResponse, error)
	GetService(context.Context, *EmrRequest) (*EmrGetServiceResponse, error)
	GetOpdScreening(context.Context, *EmrServiceRequest) (*EmrGetOpdScreenResponse, error)
	GetOpdDiagnosis(context.Context, *EmrServiceRequest) (*EmrGetOpdDiagResponse, error)
	GetOpdProcedure(context.Context, *EmrServiceRequest) (*EmrGetOpdProcedureResponse, error)
	GetOpdDrug(context.Context, *EmrServiceRequest) (*EmrGetOpdDrugResponse, error)
	GetOpdLab(context.Context, *EmrServiceRequest) (*EmrGetOpdLabResponse, error)
	GetAppointment(context.Context, *EmrSearchRequest) (*EmrGetAppointmentResponse, error)
	GetReferOut(context.Context, *EmrSearchRequest) (*EmrGetReferOutResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Search(context.Context, *EmrSearchRequest) (*EmrSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedServiceServer) GetService(context.Context, *EmrRequest) (*EmrGetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServiceServer) GetOpdScreening(context.Context, *EmrServiceRequest) (*EmrGetOpdScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdScreening not implemented")
}
func (UnimplementedServiceServer) GetOpdDiagnosis(context.Context, *EmrServiceRequest) (*EmrGetOpdDiagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdDiagnosis not implemented")
}
func (UnimplementedServiceServer) GetOpdProcedure(context.Context, *EmrServiceRequest) (*EmrGetOpdProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdProcedure not implemented")
}
func (UnimplementedServiceServer) GetOpdDrug(context.Context, *EmrServiceRequest) (*EmrGetOpdDrugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdDrug not implemented")
}
func (UnimplementedServiceServer) GetOpdLab(context.Context, *EmrServiceRequest) (*EmrGetOpdLabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdLab not implemented")
}
func (UnimplementedServiceServer) GetAppointment(context.Context, *EmrSearchRequest) (*EmrGetAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedServiceServer) GetReferOut(context.Context, *EmrSearchRequest) (*EmrGetReferOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferOut not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Search(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetService(ctx, req.(*EmrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOpdScreening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOpdScreening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetOpdScreening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOpdScreening(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOpdDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOpdDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetOpdDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOpdDiagnosis(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOpdProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOpdProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetOpdProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOpdProcedure(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOpdDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOpdDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetOpdDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOpdDrug(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOpdLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOpdLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetOpdLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOpdLab(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetAppointment(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetReferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetReferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Service/GetReferOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetReferOut(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Service_Search_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Service_GetService_Handler,
		},
		{
			MethodName: "GetOpdScreening",
			Handler:    _Service_GetOpdScreening_Handler,
		},
		{
			MethodName: "GetOpdDiagnosis",
			Handler:    _Service_GetOpdDiagnosis_Handler,
		},
		{
			MethodName: "GetOpdProcedure",
			Handler:    _Service_GetOpdProcedure_Handler,
		},
		{
			MethodName: "GetOpdDrug",
			Handler:    _Service_GetOpdDrug_Handler,
		},
		{
			MethodName: "GetOpdLab",
			Handler:    _Service_GetOpdLab_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _Service_GetAppointment_Handler,
		},
		{
			MethodName: "GetReferOut",
			Handler:    _Service_GetReferOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/emr.proto",
}
