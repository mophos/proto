// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmrServiceClient is the client API for EmrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmrServiceClient interface {
	Search(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrSearchResponse, error)
	GetService(ctx context.Context, in *EmrRequest, opts ...grpc.CallOption) (*EmrServiceListResponse, error)
	GetOpdScreening(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDScreenResponse, error)
	GetOpdDiagnosis(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDDiagResponse, error)
	GetOpdProcedure(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDProcedureResponse, error)
	GetOpdDrug(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDDrugResponse, error)
	GetOpdLab(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDLabResponse, error)
	GetAppointment(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrAppointmentResponse, error)
	GetReferOut(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrReferOutResponse, error)
}

type emrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmrServiceClient(cc grpc.ClientConnInterface) EmrServiceClient {
	return &emrServiceClient{cc}
}

func (c *emrServiceClient) Search(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrSearchResponse, error) {
	out := new(EmrSearchResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetService(ctx context.Context, in *EmrRequest, opts ...grpc.CallOption) (*EmrServiceListResponse, error) {
	out := new(EmrServiceListResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetOpdScreening(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDScreenResponse, error) {
	out := new(EmrOPDScreenResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetOpdScreening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetOpdDiagnosis(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDDiagResponse, error) {
	out := new(EmrOPDDiagResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetOpdDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetOpdProcedure(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDProcedureResponse, error) {
	out := new(EmrOPDProcedureResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetOpdProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetOpdDrug(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDDrugResponse, error) {
	out := new(EmrOPDDrugResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetOpdDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetOpdLab(ctx context.Context, in *EmrServiceRequest, opts ...grpc.CallOption) (*EmrOPDLabResponse, error) {
	out := new(EmrOPDLabResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetOpdLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetAppointment(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrAppointmentResponse, error) {
	out := new(EmrAppointmentResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetReferOut(ctx context.Context, in *EmrSearchRequest, opts ...grpc.CallOption) (*EmrReferOutResponse, error) {
	out := new(EmrReferOutResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmrService/GetReferOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmrServiceServer is the server API for EmrService service.
// All implementations must embed UnimplementedEmrServiceServer
// for forward compatibility
type EmrServiceServer interface {
	Search(context.Context, *EmrSearchRequest) (*EmrSearchResponse, error)
	GetService(context.Context, *EmrRequest) (*EmrServiceListResponse, error)
	GetOpdScreening(context.Context, *EmrServiceRequest) (*EmrOPDScreenResponse, error)
	GetOpdDiagnosis(context.Context, *EmrServiceRequest) (*EmrOPDDiagResponse, error)
	GetOpdProcedure(context.Context, *EmrServiceRequest) (*EmrOPDProcedureResponse, error)
	GetOpdDrug(context.Context, *EmrServiceRequest) (*EmrOPDDrugResponse, error)
	GetOpdLab(context.Context, *EmrServiceRequest) (*EmrOPDLabResponse, error)
	GetAppointment(context.Context, *EmrSearchRequest) (*EmrAppointmentResponse, error)
	GetReferOut(context.Context, *EmrSearchRequest) (*EmrReferOutResponse, error)
	mustEmbedUnimplementedEmrServiceServer()
}

// UnimplementedEmrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmrServiceServer struct {
}

func (UnimplementedEmrServiceServer) Search(context.Context, *EmrSearchRequest) (*EmrSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedEmrServiceServer) GetService(context.Context, *EmrRequest) (*EmrServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedEmrServiceServer) GetOpdScreening(context.Context, *EmrServiceRequest) (*EmrOPDScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdScreening not implemented")
}
func (UnimplementedEmrServiceServer) GetOpdDiagnosis(context.Context, *EmrServiceRequest) (*EmrOPDDiagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdDiagnosis not implemented")
}
func (UnimplementedEmrServiceServer) GetOpdProcedure(context.Context, *EmrServiceRequest) (*EmrOPDProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdProcedure not implemented")
}
func (UnimplementedEmrServiceServer) GetOpdDrug(context.Context, *EmrServiceRequest) (*EmrOPDDrugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdDrug not implemented")
}
func (UnimplementedEmrServiceServer) GetOpdLab(context.Context, *EmrServiceRequest) (*EmrOPDLabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpdLab not implemented")
}
func (UnimplementedEmrServiceServer) GetAppointment(context.Context, *EmrSearchRequest) (*EmrAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedEmrServiceServer) GetReferOut(context.Context, *EmrSearchRequest) (*EmrReferOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferOut not implemented")
}
func (UnimplementedEmrServiceServer) mustEmbedUnimplementedEmrServiceServer() {}

// UnsafeEmrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmrServiceServer will
// result in compilation errors.
type UnsafeEmrServiceServer interface {
	mustEmbedUnimplementedEmrServiceServer()
}

func RegisterEmrServiceServer(s grpc.ServiceRegistrar, srv EmrServiceServer) {
	s.RegisterService(&EmrService_ServiceDesc, srv)
}

func _EmrService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).Search(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetService(ctx, req.(*EmrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetOpdScreening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetOpdScreening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetOpdScreening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetOpdScreening(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetOpdDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetOpdDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetOpdDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetOpdDiagnosis(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetOpdProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetOpdProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetOpdProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetOpdProcedure(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetOpdDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetOpdDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetOpdDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetOpdDrug(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetOpdLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetOpdLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetOpdLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetOpdLab(ctx, req.(*EmrServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetAppointment(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetReferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmrSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetReferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmrService/GetReferOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetReferOut(ctx, req.(*EmrSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmrService_ServiceDesc is the grpc.ServiceDesc for EmrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.EmrService",
	HandlerType: (*EmrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _EmrService_Search_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _EmrService_GetService_Handler,
		},
		{
			MethodName: "GetOpdScreening",
			Handler:    _EmrService_GetOpdScreening_Handler,
		},
		{
			MethodName: "GetOpdDiagnosis",
			Handler:    _EmrService_GetOpdDiagnosis_Handler,
		},
		{
			MethodName: "GetOpdProcedure",
			Handler:    _EmrService_GetOpdProcedure_Handler,
		},
		{
			MethodName: "GetOpdDrug",
			Handler:    _EmrService_GetOpdDrug_Handler,
		},
		{
			MethodName: "GetOpdLab",
			Handler:    _EmrService_GetOpdLab_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _EmrService_GetAppointment_Handler,
		},
		{
			MethodName: "GetReferOut",
			Handler:    _EmrService_GetReferOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/emr.proto",
}
