// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmsServiceClient is the client API for EmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmsServiceClient interface {
	PatientInfo(ctx context.Context, in *EmsPatientRequest, opts ...grpc.CallOption) (*EmsPatientResponse, error)
}

type emsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmsServiceClient(cc grpc.ClientConnInterface) EmsServiceClient {
	return &emsServiceClient{cc}
}

func (c *emsServiceClient) PatientInfo(ctx context.Context, in *EmsPatientRequest, opts ...grpc.CallOption) (*EmsPatientResponse, error) {
	out := new(EmsPatientResponse)
	err := c.cc.Invoke(ctx, "/grpc.EmsService/PatientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmsServiceServer is the server API for EmsService service.
// All implementations must embed UnimplementedEmsServiceServer
// for forward compatibility
type EmsServiceServer interface {
	PatientInfo(context.Context, *EmsPatientRequest) (*EmsPatientResponse, error)
	mustEmbedUnimplementedEmsServiceServer()
}

// UnimplementedEmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmsServiceServer struct {
}

func (UnimplementedEmsServiceServer) PatientInfo(context.Context, *EmsPatientRequest) (*EmsPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientInfo not implemented")
}
func (UnimplementedEmsServiceServer) mustEmbedUnimplementedEmsServiceServer() {}

// UnsafeEmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmsServiceServer will
// result in compilation errors.
type UnsafeEmsServiceServer interface {
	mustEmbedUnimplementedEmsServiceServer()
}

func RegisterEmsServiceServer(s grpc.ServiceRegistrar, srv EmsServiceServer) {
	s.RegisterService(&EmsService_ServiceDesc, srv)
}

func _EmsService_PatientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).PatientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.EmsService/PatientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).PatientInfo(ctx, req.(*EmsPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmsService_ServiceDesc is the grpc.ServiceDesc for EmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.EmsService",
	HandlerType: (*EmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PatientInfo",
			Handler:    _EmsService_PatientInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ems.proto",
}
